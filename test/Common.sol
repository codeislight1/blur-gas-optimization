// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import {Test} from "forge-std/Test.sol";
import "forge-std/console.sol";

contract Common is Test {
    // blur exchange proxy contract
    address internal owner = 0xFA9fB502534761dBDDAcf5B7e2Aa84684815F1bb;
    address internal proxy = 0x000000000000Ad05Ccc4F10045630fb830B95127;
    // block before the tx has been mined, both transactions were mined in the same block
    uint256 internal blocknumber = 16660573 - 1;
    // https://etherscan.io/tx/0xa0c7742713c3de84d117309abb892ed22c7da0cf21463be73f14a9bf041cbe56
    // execute function caller
    address internal executeCaller = 0x6E1510ED41BA743344e9BA80646194351CCa0C7f;
    // tx calldata retrieved from etherscan
    bytes internal executeCalldata =
        hex"9a1fc3a7000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001ca94fa58e948ecf88682fb7a04c26124c86cf705f47633fef9ee4223fd7b7fa8d3de27230c42a808757405a691f7a4d81285ead3f1cde06765d675b2993168e3b000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe385b0000000000000000000000006a76707157353e5248d41653c2771a0b2e11db5200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000dab4a563819e8fd93dba3b25bc3495000000000000000000000000e6160325a53de4deca66e3d88d7e4f25040acce000000000000000000000000000000000000000000000000000000000000003b3000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000444759eec6ec0000000000000000000000000000000000000000000000000000000000063ebd8dc0000000000000000000000000000000000000000000000000000000063f5135c00000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000255b9117d296a3fc4c113e3d56ba0bc80000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000320000000000000000000000004cbe959cb852745541ef89094be7ad0ad3fdf00c000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001b566164e8b95fafa29bdd58506cd17cf9f868f24210d654f5061efb34f6398493757175ff1d4cb5ab7c3a0f4eee8d25877e8935775097c1cb10440b29dd734f8e00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe385b0000000000000000000000006e1510ed41ba743344e9ba80646194351cca0c7f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dab4a563819e8fd93dba3b25bc3495000000000000000000000000e6160325a53de4deca66e3d88d7e4f25040acce000000000000000000000000000000000000000000000000000000000000003b3000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000444759eec6ec0000000000000000000000000000000000000000000000000000000000063ebd8dd0000000000000000000000000000000000000000000000000000000063f1c1fa00000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000ec74d2c9b12275e0805546f3a86aecf00000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001bf9e933e53a06d68bfc6fd507e7057796739402919173b26ba15d5cef087edae63ee4a0e5e8544a5bb06b8fdaf674552b4de4823db66df9dee89eb626132e9031";
    uint256 internal executeValue = 0.3075 ether;

    // https://etherscan.io/tx/0xc16f67ce5dd5b1048be2f197779b0950d1c6a14c41313dffb0f9d0498c4b0cf4
    // bulkExecute function caller
    address internal bulkExecuteCaller = 0x1F14F9c2FfaB9111cDfd84E4d6F67852a749dE46;
    // tx calldata retrieved from etherscan
    bytes internal bulkExecuteCalldata =
        hex"";
    uint256 internal bulkExecuteValue = 0.258 ether;

    function callBlurExchange(address caller, uint256 value, bytes memory data) internal {
        // use original tx caller
        vm.startPrank(caller);
        uint256 preCall = gasleft();
        (bool success,) = address(proxy).call{value: value, gas: gasleft()}(data);
        uint256 postCall = gasleft();
        // calculating call gas consumed
        console.log(
            executeCaller == caller ? "execute call gas consumed:" : "bulkExecute call gas consumed:",
            preCall - postCall
        );
        require(success, "!success");
        vm.stopPrank();
    }
}
